<apex:page showHeader="false" standardStylesheets="false">
<html>
    <head>
        <title>SEC</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
        <meta http-equiv="X-UA-Compatible" content="IE=9; IE=8; IE=7; IE=EDGE"></meta>
        <!-- Bootstrap -->
         <apex:stylesheet value="{!URLFOR($Resource.SECForm, 'css/bootstrap.min.css')}" />
         <apex:stylesheet value="{!URLFOR($Resource.SECForm, 'css/font-awesome.min.css')}" />
            <apex:includeScript value="{!URLFOR($Resource.SECForm, 'js/jquery.js') }" />
         <apex:includeScript value="{!URLFOR($Resource.SECForm, 'js/bootstrap.js') }" />
    
          <apex:includeScript value="{!URLFOR($Resource.SECForm, 'js/doT.min.js') }" />
          <apex:includeScript value="{!URLFOR($Resource.SECForm, 'js/bootbox.min.js') }" />
          <script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
           <script src="/soap/ajax/15.0/apex.js" type="text/javascript"></script>
            <script>
sforce.Transport = function(url) {
    this.url = url;
    this.connection = null;

    this.newConnection = function() {
        try {
            this.connection = new ActiveXObject('Msxml2.XMLHTTP');
        } catch(e) {
            try {
                this.connection = new ActiveXObject('Microsoft.XMLHTTP');
            } catch(e) {
                this.connection = new XMLHttpRequest();
            }
        }

        return this.connection;
    };

    this.send = function (envelope, callback, async, timeout) {
        this.newConnection();
        if (async) {
            this.connection.onreadystatechange = this.httpConnectionCallback;
        }
        var holder = new sforce.internal.ConnectionHolder(this.connection, callback);
        sforce.internal._connections.push(holder);
        this.connection.open("POST", this.url, async);
        this.connection.setRequestHeader("Content-Type", "text/xml; charset=UTF-8");
        this.connection.setRequestHeader("SOAPAction", "\"\"");
        this.connection.setRequestHeader("Accept", "text/xml");
     //   this.connection.setRequestHeader("User-Agent", "SFAJAX 1.0");
        this.connection.send(envelope);
        if (async && typeof(timeout) !== "undefined") {
            this.setTimeoutOn(holder, timeout);
        }
        if (!async) {
            this.httpConnectionCallback();
        }
    };

    this.setTimeoutOn = function (holder, timeout) {
        function abortConnection() {
            if (holder.connection.readyState !== 4) {
                holder.timedout = true;
                holder.connection.abort();
            }
        }
        setTimeout(abortConnection, timeout);
    };

    this.httpConnectionCallback = function () {

        for (var i = 0; i < sforce.internal._connections.length; i++) {
            var holder = sforce.internal._connections[i];
            if (holder !== null) {
                if (holder.timedout) {
                    sforce.internal._connections[i] = null;
                    sforce.internal._connections.slice(i,1);
                    holder.callback.httpCallback("Remote invocation timed out", false);
                } else  if (holder.connection.readyState == 4) {
                    sforce.internal._connections[i] = null;
                    sforce.internal._connections.slice(i,1);
                    var success = holder.connection.status == 200;
                    if (sforce.debug.trace) {
                        sforce.debug.log("Response : status - " + holder.connection.status);
                        sforce.debug.logXml(holder.connection.responseText);
                    }
                    if (sforce.debug.apexTrace) {
                        sforce.debug.logApex(holder.connection.responseText);
                    }
                    if (holder.connection.responseXML && holder.connection.responseXML.documentElement) {
                        holder.callback.httpCallback(holder.connection.responseXML.documentElement, success);
                    } else {
                        holder.callback.httpCallback("Remote invocation failed, due to: " + holder.connection.responseText +
                                                     " status code: ", holder.connection.status);
                    }
                }
            }
        }
    };
};
</script>
        <script type="text/javascript">
   
 function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}
function clearString(s){ 
    var pattern = new RegExp("[`~!@#$^&*()=|{}':;',\\[\\].<>/?~！@#￥……&*（）&;|{}【】‘；：”“'。，、？]") 
    var rs = ""; 
    for (var i = 0; i < s.length; i++) { 
        rs = rs+s.substr(i, 1).replace(pattern, ''); 
    } 
    return rs;  
} 
     var oid;
     $(document).ready(function() {
     
     var eval=getParameterByName('newEval');
     if(eval =='1' ){
         $('#btn_text').text('Start Evaluation');
     }else{
       $('#btn_text').text('Continue Evaluation');
     }
        sforce.connection.sessionId = "{!$Api.Session_ID}";
        oid=getParameterByName('oid');
                var result = sforce.apex.execute("SECFormStartEvaluation", "getSECFormInfo", {
                            SECFormOpptyFormId: oid
                });
                result=JSON.parse(result);
          
             $('#titleLabel').html(result.titleLabel);
             $('#trialOpportunityNameText').html(result.trialOpportunityNameText);
             $('#purpose').html(result.purpose);
                $('#instructions').html(result.instructions);
                    $('#header').html(result.pageHeader);
                    $('#footer').html(result.pageFooter);
           
     
     });
    
    function start(){
    
              var result = sforce.apex.execute("SECFormStartEvaluation", "checkFormValid", {
                            SECFormOpptyFormId: oid
                        });
               if(result=='true'){
                // has questions
    
              result = sforce.apex.execute("SECFormDemographics", "getTableOfContents", {
                            SECFormOpptyFormId: oid
                        });
                  result=JSON.parse(result);
                 if(result[0].Id == "1"){
                      window.location.href='SECFormDemographics'+location.search;
                 }else{
                     
                        window.location.href="SECFormTemplate?sectionId="+result[0].Id+"&oid="+oid+"&sectionName="+result[0].Label;
     
                 }
              
              }else{
                  //no questions
               
            
                  bootbox.alert('Invalid form! Please add question templates!');
              }
            
        
                
                  
                  
                  
              
            
         
      
      
               
                           
                         
    }
    
      function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);
                return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
            }
    </script>
    </head>
    <body>
    
        
        
 
        <div class="container" style="padding: 0px;margin: 0px;width: 100%;">
             <p id="header"  class="text-left text-info">
               </p>
        
             <hr />
            <h3 class="text-center text-info" id="titleLabel">  </h3>
           
            <div class="container-fluid">
                <div class="row-fluid">
                    <div class="span12">
                        <p class="text-center text-warning">
                            <strong id="trialOpportunityNameText"></strong>
                        </p>
                    </div>
                    
                </div>
            </div>

            <div class="container-fluid" style="margin-left:100px;margin-right: 100px;margin-top: 50px">
                <div class="row-fluid">
                    <div class="span12">
                        <p>
                            <strong>Purpose</strong>
                        </p>
                        <p id="purpose">
                           
                        </p>
                    </div>
                </div>
            </div>

            <div class="container-fluid" style="margin-left:100px;margin-right: 100px;margin-top: 20px">
                <div class="row-fluid">
                    <div class="span12">
                        <p>
                            <strong>Instructions</strong>
                        </p>
                        <p id="instructions">
                          </p>
                    </div>
                </div>
            </div>

            <div class="container-fluid " style="margin-top: 50px;">
                <div class="row-fluid" >
                    <div class="span12"  style="text-align:center;">
                        <button class="btn btn-large btn-info " type="button" onclick="start();" id="btn_text">
                            
                        </button>
                    </div>
                </div>
            </div>
        <hr/>
          <p id="footer"  class="text-center text-info">
           </p>
        </div>
        <!-- /container -->
      
     

    </body>
</html>
</apex:page>